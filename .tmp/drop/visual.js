/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 2:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   b: () => (/* binding */ Visual)\n/* harmony export */ });\n/* harmony import */ var powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(674);\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(795);\n/* harmony import */ var _services_DateRangeCalculator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(668);\n/* harmony import */ var _services_FilterManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(468);\n/* harmony import */ var _services_UIManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(588);\n/* harmony import */ var _services_DebugLogger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(130);\n/*\n*  Power BI Visual CLI\n*\n*  Copyright (c) Microsoft Corporation\n*  All rights reserved.\n*  MIT License\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\n*  in the Software without restriction, including without limitation the rights\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is\n*  furnished to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n*  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n*  THE SOFTWARE.\n*/\n\n\n\n\n// Service imports\n\n\n\n\n/**\n * Power BI Date Slicer Visual\n * Single Responsibility: Orchestrate the date slicer functionality\n * Dependency Inversion: Depends on abstractions (interfaces) for services\n * Open/Closed Principle: Open for extension (new services), closed for modification\n */\nclass Visual {\n    target;\n    host;\n    formattingSettings;\n    formattingSettingsService;\n    // Services (Dependency Injection)\n    dateRangeCalculator;\n    filterManager;\n    uiManager;\n    debugLogger;\n    // Current state\n    currentDateRange = null;\n    isInitialized = false;\n    constructor(options) {\n        try {\n            console.log('Date Slicer Visual constructor', options);\n            // Initialize core properties\n            this.target = options.element;\n            this.host = options.host;\n            this.formattingSettingsService = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .FormattingSettingsService */ .O();\n            // Initialize services (Dependency Injection)\n            this.debugLogger = new _services_DebugLogger__WEBPACK_IMPORTED_MODULE_5__/* .DebugLogger */ .k();\n            this.dateRangeCalculator = new _services_DateRangeCalculator__WEBPACK_IMPORTED_MODULE_2__/* .DateRangeCalculator */ .O();\n            this.filterManager = new _services_FilterManager__WEBPACK_IMPORTED_MODULE_3__/* .FilterManager */ .q();\n            this.uiManager = new _services_UIManager__WEBPACK_IMPORTED_MODULE_4__/* .UIManager */ .o(this.target, this.dateRangeCalculator, this.debugLogger);\n            // Set up UI event handlers\n            this.setupUIEventHandlers();\n            this.debugLogger.logInfo(\"Date Slicer Visual initialized successfully\");\n        }\n        catch (error) {\n            console.error(\"Error initializing Date Slicer Visual:\", error);\n        }\n    }\n    /**\n     * Update the visual with new data and settings\n     * @param options Update options containing data views and settings\n     */\n    update(options) {\n        try {\n            this.debugLogger.logInfo(\"Visual update started\");\n            // Update formatting settings\n            this.updateFormattingSettings(options);\n            // Check for date column availability\n            this.checkDateColumnAvailability(options);\n            // Initialize UI if not already done\n            if (!this.isInitialized) {\n                this.initializeUI();\n                this.isInitialized = true;\n            }\n            // Apply current settings to UI\n            this.applySettings();\n            // Set default date range if none is set\n            if (!this.currentDateRange) {\n                this.setDefaultDateRange();\n            }\n            this.debugLogger.logInfo(\"Visual update completed successfully\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error during visual update: ${error}`);\n            console.error('Visual update error:', error);\n        }\n    }\n    /**\n     * Returns properties pane formatting model content hierarchies, properties and latest formatting values\n     * This method is called once every time we open properties pane or when the user edit any format property\n     */\n    getFormattingModel() {\n        return this.formattingSettingsService.buildFormattingModel(this.formattingSettings);\n    }\n    /**\n     * Update formatting settings from options\n     * @param options Visual update options\n     */\n    updateFormattingSettings(options) {\n        try {\n            if (options.dataViews && options.dataViews[0]) {\n                this.formattingSettings = this.formattingSettingsService.populateFormattingSettingsModel(_settings__WEBPACK_IMPORTED_MODULE_1__/* .VisualFormattingSettingsModel */ .S, options.dataViews[0]);\n            }\n            else {\n                // Use default settings if no data view\n                this.formattingSettings = new _settings__WEBPACK_IMPORTED_MODULE_1__/* .VisualFormattingSettingsModel */ .S();\n            }\n            this.debugLogger.logInfo(\"Formatting settings updated\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error updating formatting settings: ${error}`);\n        }\n    }\n    /**\n     * Check if date column is available for filtering\n     * @param options Visual update options\n     */\n    checkDateColumnAvailability(options) {\n        try {\n            if (options.dataViews && options.dataViews[0]) {\n                const hasDateColumn = this.filterManager.hasDateColumn(options.dataViews[0]);\n                if (hasDateColumn) {\n                    this.debugLogger.logInfo(\"Date column found and configured for filtering\");\n                }\n                else {\n                    this.debugLogger.logWarning(\"No date column found in data view - filtering may not work\");\n                }\n            }\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error checking date column availability: ${error}`);\n        }\n    }\n    /**\n     * Initialize the UI components\n     */\n    initializeUI() {\n        try {\n            this.uiManager.createUI();\n            this.uiManager.setupEventHandlers();\n            this.debugLogger.logInfo(\"UI initialized successfully\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error initializing UI: ${error}`);\n        }\n    }\n    /**\n     * Apply current settings to the UI\n     */\n    applySettings() {\n        try {\n            if (!this.formattingSettings)\n                return;\n            const settings = this.formattingSettings.dateSlicerSettings;\n            // Apply visual styles\n            this.uiManager.applyStyles(settings.primaryColor.value.value, settings.secondaryColor.value.value, settings.fontSize.value);\n            // Toggle debug information\n            this.uiManager.toggleDebugInfo(settings.debugMode.value);\n            this.debugLogger.logInfo(\"Settings applied to UI\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error applying settings: ${error}`);\n        }\n    }\n    /**\n     * Set the default date range based on settings\n     */\n    setDefaultDateRange() {\n        try {\n            if (!this.formattingSettings)\n                return;\n            const defaultRangeType = this.formattingSettings.dateSlicerSettings.defaultRange.value.value;\n            const dateRange = this.dateRangeCalculator.calculateDateRange(defaultRangeType);\n            this.currentDateRange = dateRange;\n            this.uiManager.updateDateRangeDisplay(dateRange);\n            this.uiManager.setSelectedRangeType(defaultRangeType);\n            this.debugLogger.logInfo(`Default date range set: ${defaultRangeType}`);\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error setting default date range: ${error}`);\n        }\n    }\n    /**\n     * Set up UI event handlers\n     */\n    setupUIEventHandlers() {\n        try {\n            // Handle apply filter action\n            this.uiManager.setOnApplyFilter((dateRange) => {\n                this.handleApplyFilter(dateRange);\n            });\n            // Handle clear filter action\n            this.uiManager.setOnClearFilter(() => {\n                this.handleClearFilter();\n            });\n            this.debugLogger.logInfo(\"UI event handlers configured\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error setting up UI event handlers: ${error}`);\n        }\n    }\n    /**\n     * Handle apply filter action from UI\n     * @param dateRange The date range to apply as filter\n     */\n    handleApplyFilter(dateRange) {\n        try {\n            if (!this.dateRangeCalculator.isValidDateRange(dateRange)) {\n                this.debugLogger.logError(\"Invalid date range provided for filter application\");\n                return;\n            }\n            // Update current date range\n            this.currentDateRange = dateRange;\n            // Update UI display\n            this.uiManager.updateDateRangeDisplay(dateRange);\n            // Apply filter to Power BI\n            this.filterManager.applyDateFilter(dateRange, this.host);\n            this.debugLogger.logInfo(`Filter applied: ${this.dateRangeCalculator.formatDate(dateRange.startDate)} to ${this.dateRangeCalculator.formatDate(dateRange.endDate)}`);\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error applying filter: ${error}`);\n        }\n    }\n    /**\n     * Handle clear filter action from UI\n     */\n    handleClearFilter() {\n        try {\n            // Clear filters in Power BI\n            this.filterManager.clearFilters(this.host);\n            // Reset to default date range\n            this.setDefaultDateRange();\n            this.debugLogger.logInfo(\"Filters cleared and reset to default\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error clearing filters: ${error}`);\n        }\n    }\n    /**\n     * Get current date range (for external access if needed)\n     * @returns Current date range or null if not set\n     */\n    getCurrentDateRange() {\n        return this.currentDateRange;\n    }\n    /**\n     * Programmatically set date range (for external control if needed)\n     * @param dateRange The date range to set\n     */\n    setDateRange(dateRange) {\n        try {\n            if (this.dateRangeCalculator.isValidDateRange(dateRange)) {\n                this.handleApplyFilter(dateRange);\n            }\n            else {\n                this.debugLogger.logError(\"Invalid date range provided for programmatic setting\");\n            }\n        }\n        catch (error) {\n            this.debugLogger.logError(`Error setting date range programmatically: ${error}`);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n\n}");

/***/ }),

/***/ 130:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   k: () => (/* binding */ DebugLogger)\n/* harmony export */ });\n/*\n *  Power BI Date Slicer Visual\n *\n *  Debug Logger Implementation\n *  Single Responsibility: Handle all debug logging operations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n */\n\n/**\n * Debug Logger Service\n * Single Responsibility: Manage debug logging and display\n */\nclass DebugLogger {\n    debugLogs = [];\n    maxLogs = 50;\n    /**\n     * Log an information message\n     * @param message The message to log\n     */\n    logInfo(message) {\n        this.addLog(`[INFO] ${new Date().toLocaleTimeString()}: ${message}`);\n    }\n    /**\n     * Log a warning message\n     * @param message The message to log\n     */\n    logWarning(message) {\n        this.addLog(`[WARNING] ${new Date().toLocaleTimeString()}: ${message}`);\n    }\n    /**\n     * Log an error message\n     * @param message The message to log\n     */\n    logError(message) {\n        this.addLog(`[ERROR] ${new Date().toLocaleTimeString()}: ${message}`);\n    }\n    /**\n     * Get all debug logs\n     * @returns Array of debug log messages\n     */\n    getLogs() {\n        return [...this.debugLogs];\n    }\n    /**\n     * Clear all debug logs\n     */\n    clearLogs() {\n        this.debugLogs = [];\n    }\n    /**\n     * Add a log entry\n     * @param log The log message to add\n     */\n    addLog(log) {\n        this.debugLogs.push(log);\n        // Keep only the most recent logs\n        if (this.debugLogs.length > this.maxLogs) {\n            this.debugLogs = this.debugLogs.slice(-this.maxLogs);\n        }\n        // Also log to console for development\n        console.log(log);\n    }\n    /**\n     * Get formatted logs for display\n     * @returns Formatted string of all logs\n     */\n    getFormattedLogs() {\n        return this.debugLogs.join('\\n');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTMwLmpzIiwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7Ozs7R0FTRztBQUVVO0FBRWI7OztHQUdHO0FBQ0ksTUFBTSxXQUFXO0lBQ1osU0FBUyxHQUFhLEVBQUUsQ0FBQztJQUN6QixPQUFPLEdBQVcsRUFBRSxDQUFDO0lBRTdCOzs7T0FHRztJQUNJLE9BQU8sQ0FBQyxPQUFlO1FBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLElBQUksRUFBRSxDQUFDLGtCQUFrQixFQUFFLEtBQUssT0FBTyxFQUFFLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksVUFBVSxDQUFDLE9BQWU7UUFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLElBQUksSUFBSSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRDs7O09BR0c7SUFDSSxRQUFRLENBQUMsT0FBZTtRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLE9BQU8sRUFBRSxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE9BQU87UUFDVixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksU0FBUztRQUNaLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7O09BR0c7SUFDSyxNQUFNLENBQUMsR0FBVztRQUN0QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV6QixpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRUQsc0NBQXNDO1FBQ3RDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLGdCQUFnQjtRQUNuQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7Q0FDSiIsInNvdXJjZXMiOlsid2VicGFjazovL21EQ0RhdGVUaW1lUGlja2VyN0MxRDIyMDJGQjBCNEM1MUEwRTZGQTk2MUVCRjIyOUNfREVCVUcvLi9zcmMvc2VydmljZXMvRGVidWdMb2dnZXIudHM/ZDU1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIFBvd2VyIEJJIERhdGUgU2xpY2VyIFZpc3VhbFxuICogIFxuICogIERlYnVnIExvZ2dlciBJbXBsZW1lbnRhdGlvblxuICogIFNpbmdsZSBSZXNwb25zaWJpbGl0eTogSGFuZGxlIGFsbCBkZWJ1ZyBsb2dnaW5nIG9wZXJhdGlvbnNcbiAqICBcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTUlUIExpY2Vuc2VcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBEZWJ1ZyBMb2dnZXIgU2VydmljZVxuICogU2luZ2xlIFJlc3BvbnNpYmlsaXR5OiBNYW5hZ2UgZGVidWcgbG9nZ2luZyBhbmQgZGlzcGxheVxuICovXG5leHBvcnQgY2xhc3MgRGVidWdMb2dnZXIge1xuICAgIHByaXZhdGUgZGVidWdMb2dzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHByaXZhdGUgbWF4TG9nczogbnVtYmVyID0gNTA7XG5cbiAgICAvKipcbiAgICAgKiBMb2cgYW4gaW5mb3JtYXRpb24gbWVzc2FnZVxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGxvZ1xuICAgICAqL1xuICAgIHB1YmxpYyBsb2dJbmZvKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZExvZyhgW0lORk9dICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX06ICR7bWVzc2FnZX1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMb2cgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBsb2dcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9nV2FybmluZyhtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hZGRMb2coYFtXQVJOSU5HXSAke25ldyBEYXRlKCkudG9Mb2NhbGVUaW1lU3RyaW5nKCl9OiAke21lc3NhZ2V9YCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG9nIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBsb2dcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9nRXJyb3IobWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWRkTG9nKGBbRVJST1JdICR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX06ICR7bWVzc2FnZX1gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGRlYnVnIGxvZ3NcbiAgICAgKiBAcmV0dXJucyBBcnJheSBvZiBkZWJ1ZyBsb2cgbWVzc2FnZXNcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0TG9ncygpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5kZWJ1Z0xvZ3NdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIGFsbCBkZWJ1ZyBsb2dzXG4gICAgICovXG4gICAgcHVibGljIGNsZWFyTG9ncygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kZWJ1Z0xvZ3MgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBsb2cgZW50cnlcbiAgICAgKiBAcGFyYW0gbG9nIFRoZSBsb2cgbWVzc2FnZSB0byBhZGRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZExvZyhsb2c6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmRlYnVnTG9ncy5wdXNoKGxvZyk7XG4gICAgICAgIFxuICAgICAgICAvLyBLZWVwIG9ubHkgdGhlIG1vc3QgcmVjZW50IGxvZ3NcbiAgICAgICAgaWYgKHRoaXMuZGVidWdMb2dzLmxlbmd0aCA+IHRoaXMubWF4TG9ncykge1xuICAgICAgICAgICAgdGhpcy5kZWJ1Z0xvZ3MgPSB0aGlzLmRlYnVnTG9ncy5zbGljZSgtdGhpcy5tYXhMb2dzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsc28gbG9nIHRvIGNvbnNvbGUgZm9yIGRldmVsb3BtZW50XG4gICAgICAgIGNvbnNvbGUubG9nKGxvZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGZvcm1hdHRlZCBsb2dzIGZvciBkaXNwbGF5XG4gICAgICogQHJldHVybnMgRm9ybWF0dGVkIHN0cmluZyBvZiBhbGwgbG9nc1xuICAgICAqL1xuICAgIHB1YmxpYyBnZXRGb3JtYXR0ZWRMb2dzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlYnVnTG9ncy5qb2luKCdcXG4nKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///130\n\n}");

/***/ }),

/***/ 468:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q: () => (/* binding */ FilterManager)\n/* harmony export */ });\n/*\n *  Power BI Date Slicer Visual\n *\n *  Filter Manager Implementation\n *  Single Responsibility: Handle all filter operations with Power BI\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n */\n\n/**\n * Implementation of filter management service\n * Single Responsibility: Manage Power BI filters\n * Dependency Inversion: Depends on abstractions (interfaces), not concretions\n */\nclass FilterManager {\n    dateColumnTarget = null;\n    dateColumnName = null;\n    tableQualifiedName = null;\n    /**\n     * Apply date filter to the report\n     * @param dateRange Date range to apply as filter\n     * @param host Power BI visual host for applying filters\n     */\n    applyDateFilter(dateRange, host) {\n        try {\n            if (!this.dateColumnTarget || !this.dateColumnName || !this.tableQualifiedName) {\n                console.warn(\"No date column available for filtering\");\n                return;\n            }\n            if (!this.isValidDateRange(dateRange)) {\n                console.error(\"Invalid date range provided for filtering\");\n                return;\n            }\n            // Create advanced filter for date range using proper schema\n            const filter = {\n                $schema: \"https://powerbi.com/product/schema#advanced\",\n                target: {\n                    table: this.tableQualifiedName,\n                    column: this.dateColumnName\n                },\n                logicalOperator: \"And\",\n                conditions: [\n                    {\n                        operator: \"GreaterThanOrEqual\",\n                        value: dateRange.startDate.toISOString()\n                    },\n                    {\n                        operator: \"LessThanOrEqual\",\n                        value: dateRange.endDate.toISOString()\n                    }\n                ]\n            };\n            // Apply the filter\n            host.applyJsonFilter(filter, \"general\", \"filter\", 0 /* FilterAction.merge */);\n            console.log(`Applied date filter: ${dateRange.startDate.toDateString()} to ${dateRange.endDate.toDateString()}`);\n        }\n        catch (error) {\n            console.error(\"Error applying date filter:\", error);\n        }\n    }\n    /**\n     * Clear all applied filters\n     * @param host Power BI visual host for clearing filters\n     */\n    clearFilters(host) {\n        try {\n            // Simply apply null to remove all filters\n            host.applyJsonFilter(null, \"general\", \"filter\", 1 /* FilterAction.remove */);\n            console.log(\"Cleared all date filters\");\n        }\n        catch (error) {\n            console.error(\"Error clearing filters:\", error);\n        }\n    }\n    /**\n     * Validate if date column is available for filtering\n     * @param dataView Power BI data view\n     * @returns True if date column is available, false otherwise\n     */\n    hasDateColumn(dataView) {\n        try {\n            if (!dataView || !dataView.metadata || !dataView.metadata.columns) {\n                return false;\n            }\n            // Look for date column in the data view\n            const dateColumn = dataView.metadata.columns.find(column => column.type && column.type.dateTime);\n            if (dateColumn && dateColumn.expr) {\n                this.dateColumnTarget = dateColumn.expr;\n                this.dateColumnName = dateColumn.displayName || \"Date\";\n                // Extract table name from the expression\n                if (dateColumn.expr && dateColumn.expr.source) {\n                    this.tableQualifiedName = dateColumn.expr.source.entity || \"Table\";\n                }\n                return true;\n            }\n            return false;\n        }\n        catch (error) {\n            console.error(\"Error checking for date column:\", error);\n            return false;\n        }\n    }\n    /**\n     * Private method to validate date range\n     * @param dateRange The date range to validate\n     * @returns True if valid, false otherwise\n     */\n    isValidDateRange(dateRange) {\n        return dateRange &&\n            dateRange.startDate instanceof Date &&\n            dateRange.endDate instanceof Date &&\n            dateRange.startDate <= dateRange.endDate;\n    }\n    /**\n     * Get the current date column target\n     * @returns The current date column target expression\n     */\n    getDateColumnTarget() {\n        return this.dateColumnTarget;\n    }\n    /**\n     * Set the date column target manually\n     * @param target The date column target expression\n     * @param columnName The column name\n     * @param tableName The table name\n     */\n    setDateColumnTarget(target, columnName, tableName) {\n        this.dateColumnTarget = target;\n        this.dateColumnName = columnName;\n        this.tableQualifiedName = tableName;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDY4LmpzIiwibWFwcGluZ3MiOiI7OztBQUFBOzs7Ozs7Ozs7R0FTRztBQUVVO0FBUWI7Ozs7R0FJRztBQUNJLE1BQU0sYUFBYTtJQUNkLGdCQUFnQixHQUFnQyxJQUFJLENBQUM7SUFDckQsY0FBYyxHQUFrQixJQUFJLENBQUM7SUFDckMsa0JBQWtCLEdBQWtCLElBQUksQ0FBQztJQUVqRDs7OztPQUlHO0lBQ0ksZUFBZSxDQUFDLFNBQXFCLEVBQUUsSUFBOEM7UUFDeEYsSUFBSSxDQUFDO1lBQ0QsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztnQkFDN0UsT0FBTyxDQUFDLElBQUksQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPO1lBQ1gsQ0FBQztZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztnQkFDcEMsT0FBTyxDQUFDLEtBQUssQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO2dCQUMzRCxPQUFPO1lBQ1gsQ0FBQztZQUVELDREQUE0RDtZQUM1RCxNQUFNLE1BQU0sR0FBRztnQkFDWCxPQUFPLEVBQUUsNkNBQTZDO2dCQUN0RCxNQUFNLEVBQUU7b0JBQ0osS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0I7b0JBQzlCLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYztpQkFDOUI7Z0JBQ0QsZUFBZSxFQUFFLEtBQUs7Z0JBQ3RCLFVBQVUsRUFBRTtvQkFDUjt3QkFDSSxRQUFRLEVBQUUsb0JBQW9CO3dCQUM5QixLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUU7cUJBQzNDO29CQUNEO3dCQUNJLFFBQVEsRUFBRSxpQkFBaUI7d0JBQzNCLEtBQUssRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtxQkFDekM7aUJBQ0o7YUFDSixDQUFDO1lBRUYsbUJBQW1CO1lBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLDZCQUFxQixDQUFDO1lBRXRFLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLFNBQVMsQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDckgsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3hELENBQUM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksWUFBWSxDQUFDLElBQThDO1FBQzlELElBQUksQ0FBQztZQUNELDBDQUEwQztZQUMxQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQVcsRUFBRSxTQUFTLEVBQUUsUUFBUSw4QkFBc0IsQ0FBQztZQUU1RSxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFDNUMsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLHlCQUF5QixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3BELENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLGFBQWEsQ0FBQyxRQUEwQjtRQUMzQyxJQUFJLENBQUM7WUFDRCxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBQ2hFLE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUM7WUFFRCx3Q0FBd0M7WUFDeEMsTUFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQ3ZELE1BQU0sQ0FBQyxJQUFJLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQ3RDLENBQUM7WUFFRixJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO2dCQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQyxXQUFXLElBQUksTUFBTSxDQUFDO2dCQUV2RCx5Q0FBeUM7Z0JBQ3pDLElBQUksVUFBVSxDQUFDLElBQUksSUFBSyxVQUFVLENBQUMsSUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNyRCxJQUFJLENBQUMsa0JBQWtCLEdBQUksVUFBVSxDQUFDLElBQVksQ0FBQyxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQztnQkFDaEYsQ0FBQztnQkFFRCxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDO1lBRUQsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQztRQUFDLE9BQU8sS0FBSyxFQUFFLENBQUM7WUFDYixPQUFPLENBQUMsS0FBSyxDQUFDLGlDQUFpQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3hELE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUM7SUFDTCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGdCQUFnQixDQUFDLFNBQXFCO1FBQzFDLE9BQU8sU0FBUztZQUNULFNBQVMsQ0FBQyxTQUFTLFlBQVksSUFBSTtZQUNuQyxTQUFTLENBQUMsT0FBTyxZQUFZLElBQUk7WUFDakMsU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7O09BR0c7SUFDSSxtQkFBbUI7UUFDdEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksbUJBQW1CLENBQUMsTUFBNEIsRUFBRSxVQUFrQixFQUFFLFNBQWlCO1FBQzFGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUM7UUFDL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUM7UUFDakMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLFNBQVMsQ0FBQztJQUN4QyxDQUFDO0NBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tRENEYXRlVGltZVBpY2tlcjdDMUQyMjAyRkIwQjRDNTFBMEU2RkE5NjFFQkYyMjlDX0RFQlVHLy4vc3JjL3NlcnZpY2VzL0ZpbHRlck1hbmFnZXIudHM/NmNjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogIFBvd2VyIEJJIERhdGUgU2xpY2VyIFZpc3VhbFxuICogIFxuICogIEZpbHRlciBNYW5hZ2VyIEltcGxlbWVudGF0aW9uXG4gKiAgU2luZ2xlIFJlc3BvbnNpYmlsaXR5OiBIYW5kbGUgYWxsIGZpbHRlciBvcGVyYXRpb25zIHdpdGggUG93ZXIgQklcbiAqICBcbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvblxuICogIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiAgTUlUIExpY2Vuc2VcbiAqL1xuXG5cInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHBvd2VyYmkgZnJvbSBcInBvd2VyYmktdmlzdWFscy1hcGlcIjtcbmltcG9ydCB7IElEYXRlUmFuZ2UgfSBmcm9tIFwiLi4vc2V0dGluZ3NcIjtcbmltcG9ydCB7IElGaWx0ZXJNYW5hZ2VyIH0gZnJvbSBcIi4uL2ludGVyZmFjZXMvSUZpbHRlck1hbmFnZXJcIjtcblxuaW1wb3J0IEZpbHRlckFjdGlvbiA9IHBvd2VyYmkuRmlsdGVyQWN0aW9uO1xuXG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIGZpbHRlciBtYW5hZ2VtZW50IHNlcnZpY2VcbiAqIFNpbmdsZSBSZXNwb25zaWJpbGl0eTogTWFuYWdlIFBvd2VyIEJJIGZpbHRlcnNcbiAqIERlcGVuZGVuY3kgSW52ZXJzaW9uOiBEZXBlbmRzIG9uIGFic3RyYWN0aW9ucyAoaW50ZXJmYWNlcyksIG5vdCBjb25jcmV0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgRmlsdGVyTWFuYWdlciBpbXBsZW1lbnRzIElGaWx0ZXJNYW5hZ2VyIHtcbiAgICBwcml2YXRlIGRhdGVDb2x1bW5UYXJnZXQ6IHBvd2VyYmkuZGF0YS5JU1FFeHByIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSBkYXRlQ29sdW1uTmFtZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgcHJpdmF0ZSB0YWJsZVF1YWxpZmllZE5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQXBwbHkgZGF0ZSBmaWx0ZXIgdG8gdGhlIHJlcG9ydFxuICAgICAqIEBwYXJhbSBkYXRlUmFuZ2UgRGF0ZSByYW5nZSB0byBhcHBseSBhcyBmaWx0ZXJcbiAgICAgKiBAcGFyYW0gaG9zdCBQb3dlciBCSSB2aXN1YWwgaG9zdCBmb3IgYXBwbHlpbmcgZmlsdGVyc1xuICAgICAqL1xuICAgIHB1YmxpYyBhcHBseURhdGVGaWx0ZXIoZGF0ZVJhbmdlOiBJRGF0ZVJhbmdlLCBob3N0OiBwb3dlcmJpLmV4dGVuc2liaWxpdHkudmlzdWFsLklWaXN1YWxIb3N0KTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZGF0ZUNvbHVtblRhcmdldCB8fCAhdGhpcy5kYXRlQ29sdW1uTmFtZSB8fCAhdGhpcy50YWJsZVF1YWxpZmllZE5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJObyBkYXRlIGNvbHVtbiBhdmFpbGFibGUgZm9yIGZpbHRlcmluZ1wiKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZVJhbmdlKGRhdGVSYW5nZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkYXRlIHJhbmdlIHByb3ZpZGVkIGZvciBmaWx0ZXJpbmdcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDcmVhdGUgYWR2YW5jZWQgZmlsdGVyIGZvciBkYXRlIHJhbmdlIHVzaW5nIHByb3BlciBzY2hlbWFcbiAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IHtcbiAgICAgICAgICAgICAgICAkc2NoZW1hOiBcImh0dHBzOi8vcG93ZXJiaS5jb20vcHJvZHVjdC9zY2hlbWEjYWR2YW5jZWRcIixcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgdGFibGU6IHRoaXMudGFibGVRdWFsaWZpZWROYW1lLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW46IHRoaXMuZGF0ZUNvbHVtbk5hbWVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxvZ2ljYWxPcGVyYXRvcjogXCJBbmRcIixcbiAgICAgICAgICAgICAgICBjb25kaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhdG9yOiBcIkdyZWF0ZXJUaGFuT3JFcXVhbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGRhdGVSYW5nZS5zdGFydERhdGUudG9JU09TdHJpbmcoKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogXCJMZXNzVGhhbk9yRXF1YWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRlUmFuZ2UuZW5kRGF0ZS50b0lTT1N0cmluZygpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBBcHBseSB0aGUgZmlsdGVyXG4gICAgICAgICAgICBob3N0LmFwcGx5SnNvbkZpbHRlcihmaWx0ZXIsIFwiZ2VuZXJhbFwiLCBcImZpbHRlclwiLCBGaWx0ZXJBY3Rpb24ubWVyZ2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgQXBwbGllZCBkYXRlIGZpbHRlcjogJHtkYXRlUmFuZ2Uuc3RhcnREYXRlLnRvRGF0ZVN0cmluZygpfSB0byAke2RhdGVSYW5nZS5lbmREYXRlLnRvRGF0ZVN0cmluZygpfWApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFwcGx5aW5nIGRhdGUgZmlsdGVyOlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBhbGwgYXBwbGllZCBmaWx0ZXJzXG4gICAgICogQHBhcmFtIGhvc3QgUG93ZXIgQkkgdmlzdWFsIGhvc3QgZm9yIGNsZWFyaW5nIGZpbHRlcnNcbiAgICAgKi9cbiAgICBwdWJsaWMgY2xlYXJGaWx0ZXJzKGhvc3Q6IHBvd2VyYmkuZXh0ZW5zaWJpbGl0eS52aXN1YWwuSVZpc3VhbEhvc3QpOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFNpbXBseSBhcHBseSBudWxsIHRvIHJlbW92ZSBhbGwgZmlsdGVyc1xuICAgICAgICAgICAgaG9zdC5hcHBseUpzb25GaWx0ZXIobnVsbCBhcyBhbnksIFwiZ2VuZXJhbFwiLCBcImZpbHRlclwiLCBGaWx0ZXJBY3Rpb24ucmVtb3ZlKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDbGVhcmVkIGFsbCBkYXRlIGZpbHRlcnNcIik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2xlYXJpbmcgZmlsdGVyczpcIiwgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgaWYgZGF0ZSBjb2x1bW4gaXMgYXZhaWxhYmxlIGZvciBmaWx0ZXJpbmdcbiAgICAgKiBAcGFyYW0gZGF0YVZpZXcgUG93ZXIgQkkgZGF0YSB2aWV3XG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiBkYXRlIGNvbHVtbiBpcyBhdmFpbGFibGUsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIHB1YmxpYyBoYXNEYXRlQ29sdW1uKGRhdGFWaWV3OiBwb3dlcmJpLkRhdGFWaWV3KTogYm9vbGVhbiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWRhdGFWaWV3IHx8ICFkYXRhVmlldy5tZXRhZGF0YSB8fCAhZGF0YVZpZXcubWV0YWRhdGEuY29sdW1ucykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vayBmb3IgZGF0ZSBjb2x1bW4gaW4gdGhlIGRhdGEgdmlld1xuICAgICAgICAgICAgY29uc3QgZGF0ZUNvbHVtbiA9IGRhdGFWaWV3Lm1ldGFkYXRhLmNvbHVtbnMuZmluZChjb2x1bW4gPT4gXG4gICAgICAgICAgICAgICAgY29sdW1uLnR5cGUgJiYgY29sdW1uLnR5cGUuZGF0ZVRpbWVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChkYXRlQ29sdW1uICYmIGRhdGVDb2x1bW4uZXhwcikge1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0ZUNvbHVtblRhcmdldCA9IGRhdGVDb2x1bW4uZXhwcjtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGVDb2x1bW5OYW1lID0gZGF0ZUNvbHVtbi5kaXNwbGF5TmFtZSB8fCBcIkRhdGVcIjtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IHRhYmxlIG5hbWUgZnJvbSB0aGUgZXhwcmVzc2lvblxuICAgICAgICAgICAgICAgIGlmIChkYXRlQ29sdW1uLmV4cHIgJiYgKGRhdGVDb2x1bW4uZXhwciBhcyBhbnkpLnNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRhYmxlUXVhbGlmaWVkTmFtZSA9IChkYXRlQ29sdW1uLmV4cHIgYXMgYW55KS5zb3VyY2UuZW50aXR5IHx8IFwiVGFibGVcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjaGVja2luZyBmb3IgZGF0ZSBjb2x1bW46XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByaXZhdGUgbWV0aG9kIHRvIHZhbGlkYXRlIGRhdGUgcmFuZ2VcbiAgICAgKiBAcGFyYW0gZGF0ZVJhbmdlIFRoZSBkYXRlIHJhbmdlIHRvIHZhbGlkYXRlXG4gICAgICogQHJldHVybnMgVHJ1ZSBpZiB2YWxpZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgcHJpdmF0ZSBpc1ZhbGlkRGF0ZVJhbmdlKGRhdGVSYW5nZTogSURhdGVSYW5nZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gZGF0ZVJhbmdlICYmIFxuICAgICAgICAgICAgICAgZGF0ZVJhbmdlLnN0YXJ0RGF0ZSBpbnN0YW5jZW9mIERhdGUgJiYgXG4gICAgICAgICAgICAgICBkYXRlUmFuZ2UuZW5kRGF0ZSBpbnN0YW5jZW9mIERhdGUgJiZcbiAgICAgICAgICAgICAgIGRhdGVSYW5nZS5zdGFydERhdGUgPD0gZGF0ZVJhbmdlLmVuZERhdGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGRhdGUgY29sdW1uIHRhcmdldFxuICAgICAqIEByZXR1cm5zIFRoZSBjdXJyZW50IGRhdGUgY29sdW1uIHRhcmdldCBleHByZXNzaW9uXG4gICAgICovXG4gICAgcHVibGljIGdldERhdGVDb2x1bW5UYXJnZXQoKTogcG93ZXJiaS5kYXRhLklTUUV4cHIgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZUNvbHVtblRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGRhdGUgY29sdW1uIHRhcmdldCBtYW51YWxseVxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIGRhdGUgY29sdW1uIHRhcmdldCBleHByZXNzaW9uXG4gICAgICogQHBhcmFtIGNvbHVtbk5hbWUgVGhlIGNvbHVtbiBuYW1lXG4gICAgICogQHBhcmFtIHRhYmxlTmFtZSBUaGUgdGFibGUgbmFtZVxuICAgICAqL1xuICAgIHB1YmxpYyBzZXREYXRlQ29sdW1uVGFyZ2V0KHRhcmdldDogcG93ZXJiaS5kYXRhLklTUUV4cHIsIGNvbHVtbk5hbWU6IHN0cmluZywgdGFibGVOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kYXRlQ29sdW1uVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB0aGlzLmRhdGVDb2x1bW5OYW1lID0gY29sdW1uTmFtZTtcbiAgICAgICAgdGhpcy50YWJsZVF1YWxpZmllZE5hbWUgPSB0YWJsZU5hbWU7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///468\n\n}");

/***/ }),

/***/ 588:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   o: () => (/* binding */ UIManager)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(795);\n/*\n *  Power BI Date Slicer Visual\n *\n *  UI Manager Implementation\n *  Single Responsibility: Handle all UI operations and rendering\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n */\n\n\n/**\n * Implementation of UI management service\n * Single Responsibility: Manage UI components and interactions\n * Open/Closed Principle: Open for extension (new UI components), closed for modification\n */\nclass UIManager {\n    container;\n    dateRangeCalculator;\n    debugLogger;\n    // UI Elements\n    dateRangeDisplay = null;\n    debugPanel = null;\n    rangeSelector = null;\n    customStartDate = null;\n    customEndDate = null;\n    customDateContainer = null;\n    applyButton = null;\n    clearButton = null;\n    // Event handlers\n    onApplyFilter = null;\n    onClearFilter = null;\n    constructor(container, dateRangeCalculator, debugLogger) {\n        this.container = container;\n        this.dateRangeCalculator = dateRangeCalculator;\n        this.debugLogger = debugLogger;\n    }\n    /**\n     * Create the main UI structure\n     */\n    createUI() {\n        try {\n            // Clear existing content\n            this.container.innerHTML = '';\n            this.container.className = 'date-slicer-container';\n            // Create main layout\n            this.createDateRangeDisplay();\n            this.createRangeSelector();\n            this.createCustomDateInputs();\n            this.createActionButtons();\n            this.createDebugPanel();\n            this.debugLogger.logInfo(\"UI created successfully\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to create UI: ${error}`);\n        }\n    }\n    /**\n     * Update the date range display\n     * @param dateRange Current date range to display\n     */\n    updateDateRangeDisplay(dateRange) {\n        try {\n            if (!this.dateRangeDisplay)\n                return;\n            const startDateStr = this.dateRangeCalculator.formatDate(dateRange.startDate);\n            const endDateStr = this.dateRangeCalculator.formatDate(dateRange.endDate);\n            const rangeTypeStr = this.dateRangeCalculator.getRangeTypeDisplayText(dateRange.type);\n            this.dateRangeDisplay.innerHTML = `\n                <div class=\"range-info\">\n                    <span class=\"range-type\">${rangeTypeStr}</span>\n                    <span class=\"date-range\">${startDateStr} - ${endDateStr}</span>\n                </div>\n            `;\n            this.debugLogger.logInfo(`Updated date range display: ${startDateStr} to ${endDateStr}`);\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to update date range display: ${error}`);\n        }\n    }\n    /**\n     * Show/hide debug information\n     * @param show Whether to show debug info\n     * @param debugInfo Debug information to display (optional)\n     */\n    toggleDebugInfo(show, debugInfo) {\n        try {\n            if (!this.debugPanel)\n                return;\n            if (show) {\n                this.debugPanel.style.display = 'block';\n                const logs = debugInfo || this.debugLogger.getLogs();\n                this.debugPanel.innerHTML = `\n                    <div class=\"debug-header\">Debug Information</div>\n                    <div class=\"debug-content\">\n                        ${logs.map(log => `<div class=\"debug-line\">${log}</div>`).join('')}\n                    </div>\n                `;\n            }\n            else {\n                this.debugPanel.style.display = 'none';\n            }\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to toggle debug info: ${error}`);\n        }\n    }\n    /**\n     * Set up event handlers for UI components\n     */\n    setupEventHandlers() {\n        try {\n            // Range selector change handler\n            if (this.rangeSelector) {\n                this.rangeSelector.addEventListener('change', () => {\n                    this.handleRangeSelectionChange();\n                });\n            }\n            // Apply button handler\n            if (this.applyButton) {\n                this.applyButton.addEventListener('click', () => {\n                    this.handleApplyFilter();\n                });\n            }\n            // Clear button handler\n            if (this.clearButton) {\n                this.clearButton.addEventListener('click', () => {\n                    this.handleClearFilter();\n                });\n            }\n            // Custom date change handlers\n            if (this.customStartDate) {\n                this.customStartDate.addEventListener('change', () => {\n                    this.validateCustomDates();\n                });\n            }\n            if (this.customEndDate) {\n                this.customEndDate.addEventListener('change', () => {\n                    this.validateCustomDates();\n                });\n            }\n            this.debugLogger.logInfo(\"Event handlers set up successfully\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to setup event handlers: ${error}`);\n        }\n    }\n    /**\n     * Apply visual styling based on settings\n     * @param primaryColor Primary color for styling\n     * @param secondaryColor Secondary color for styling\n     * @param fontSize Font size for text\n     */\n    applyStyles(primaryColor, secondaryColor, fontSize) {\n        try {\n            const style = document.createElement('style');\n            style.textContent = `\n                .date-slicer-container {\n                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n                    font-size: ${fontSize}px;\n                    padding: 10px;\n                    background: #ffffff;\n                    border-radius: 4px;\n                    box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n                }\n\n                .date-range-display {\n                    background: ${primaryColor};\n                    color: white;\n                    padding: 12px;\n                    border-radius: 4px;\n                    margin-bottom: 15px;\n                    text-align: center;\n                }\n\n                .range-type {\n                    display: block;\n                    font-weight: bold;\n                    margin-bottom: 5px;\n                }\n\n                .date-range {\n                    display: block;\n                    font-size: 0.9em;\n                    opacity: 0.9;\n                }\n\n                .controls-section {\n                    margin-bottom: 15px;\n                }\n\n                .control-group {\n                    margin-bottom: 10px;\n                }\n\n                .control-label {\n                    display: block;\n                    margin-bottom: 5px;\n                    font-weight: 500;\n                    color: #333;\n                }\n\n                .range-selector, .custom-date-input {\n                    width: 100%;\n                    padding: 8px;\n                    border: 1px solid #ccc;\n                    border-radius: 4px;\n                    font-size: ${fontSize}px;\n                }\n\n                .custom-dates-container {\n                    display: none;\n                    margin-top: 10px;\n                }\n\n                .custom-dates-container.show {\n                    display: block;\n                }\n\n                .custom-date-row {\n                    display: flex;\n                    gap: 10px;\n                    margin-bottom: 10px;\n                }\n\n                .custom-date-group {\n                    flex: 1;\n                }\n\n                .action-buttons {\n                    display: flex;\n                    gap: 10px;\n                    margin-top: 15px;\n                }\n\n                .btn {\n                    flex: 1;\n                    padding: 10px;\n                    border: none;\n                    border-radius: 4px;\n                    font-size: ${fontSize}px;\n                    font-weight: 500;\n                    cursor: pointer;\n                    transition: background-color 0.2s;\n                }\n\n                .btn-primary {\n                    background: ${primaryColor};\n                    color: white;\n                }\n\n                .btn-primary:hover {\n                    background: ${secondaryColor};\n                }\n\n                .btn-secondary {\n                    background: #6c757d;\n                    color: white;\n                }\n\n                .btn-secondary:hover {\n                    background: #545b62;\n                }\n\n                .btn:disabled {\n                    opacity: 0.6;\n                    cursor: not-allowed;\n                }\n\n                .debug-panel {\n                    margin-top: 15px;\n                    padding: 10px;\n                    background: #f8f9fa;\n                    border: 1px solid #dee2e6;\n                    border-radius: 4px;\n                    max-height: 200px;\n                    overflow-y: auto;\n                }\n\n                .debug-header {\n                    font-weight: bold;\n                    margin-bottom: 10px;\n                    color: #495057;\n                }\n\n                .debug-content {\n                    font-family: 'Courier New', monospace;\n                    font-size: 11px;\n                }\n\n                .debug-line {\n                    margin-bottom: 2px;\n                    padding: 2px;\n                }\n\n                .debug-line:nth-child(even) {\n                    background: rgba(0,0,0,0.05);\n                }\n            `;\n            // Remove existing style if any\n            const existingStyle = document.getElementById('date-slicer-styles');\n            if (existingStyle) {\n                existingStyle.remove();\n            }\n            style.id = 'date-slicer-styles';\n            document.head.appendChild(style);\n            this.debugLogger.logInfo(\"Styles applied successfully\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to apply styles: ${error}`);\n        }\n    }\n    /**\n     * Set event handler for apply filter action\n     * @param handler The event handler function\n     */\n    setOnApplyFilter(handler) {\n        this.onApplyFilter = handler;\n    }\n    /**\n     * Set event handler for clear filter action\n     * @param handler The event handler function\n     */\n    setOnClearFilter(handler) {\n        this.onClearFilter = handler;\n    }\n    /**\n     * Set the selected range type\n     * @param rangeType The range type to select\n     */\n    setSelectedRangeType(rangeType) {\n        if (this.rangeSelector) {\n            this.rangeSelector.value = rangeType;\n            this.handleRangeSelectionChange();\n        }\n    }\n    // Private UI creation methods\n    createDateRangeDisplay() {\n        this.dateRangeDisplay = document.createElement('div');\n        this.dateRangeDisplay.className = 'date-range-display';\n        this.container.appendChild(this.dateRangeDisplay);\n    }\n    createRangeSelector() {\n        const controlsSection = document.createElement('div');\n        controlsSection.className = 'controls-section';\n        const controlGroup = document.createElement('div');\n        controlGroup.className = 'control-group';\n        const label = document.createElement('label');\n        label.className = 'control-label';\n        label.textContent = 'Select Date Range:';\n        this.rangeSelector = document.createElement('select');\n        this.rangeSelector.className = 'range-selector';\n        // Add options\n        this.rangeSelector.innerHTML = `\n            <option value=\"${_settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last7Days}\">Last 7 Days</option>\n            <option value=\"${_settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last30Days}\">Last 30 Days</option>\n            <option value=\"${_settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last90Days}\">Last 90 Days</option>\n            <option value=\"${_settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom}\">Custom Range</option>\n        `;\n        controlGroup.appendChild(label);\n        controlGroup.appendChild(this.rangeSelector);\n        controlsSection.appendChild(controlGroup);\n        this.container.appendChild(controlsSection);\n    }\n    createCustomDateInputs() {\n        this.customDateContainer = document.createElement('div');\n        this.customDateContainer.className = 'custom-dates-container';\n        const customDateRow = document.createElement('div');\n        customDateRow.className = 'custom-date-row';\n        // Start date\n        const startDateGroup = document.createElement('div');\n        startDateGroup.className = 'custom-date-group';\n        const startLabel = document.createElement('label');\n        startLabel.className = 'control-label';\n        startLabel.textContent = 'Start Date:';\n        this.customStartDate = document.createElement('input');\n        this.customStartDate.type = 'date';\n        this.customStartDate.className = 'custom-date-input';\n        startDateGroup.appendChild(startLabel);\n        startDateGroup.appendChild(this.customStartDate);\n        // End date\n        const endDateGroup = document.createElement('div');\n        endDateGroup.className = 'custom-date-group';\n        const endLabel = document.createElement('label');\n        endLabel.className = 'control-label';\n        endLabel.textContent = 'End Date:';\n        this.customEndDate = document.createElement('input');\n        this.customEndDate.type = 'date';\n        this.customEndDate.className = 'custom-date-input';\n        endDateGroup.appendChild(endLabel);\n        endDateGroup.appendChild(this.customEndDate);\n        customDateRow.appendChild(startDateGroup);\n        customDateRow.appendChild(endDateGroup);\n        this.customDateContainer.appendChild(customDateRow);\n        this.container.appendChild(this.customDateContainer);\n    }\n    createActionButtons() {\n        const buttonContainer = document.createElement('div');\n        buttonContainer.className = 'action-buttons';\n        this.applyButton = document.createElement('button');\n        this.applyButton.className = 'btn btn-primary';\n        this.applyButton.textContent = 'Apply Filter';\n        this.clearButton = document.createElement('button');\n        this.clearButton.className = 'btn btn-secondary';\n        this.clearButton.textContent = 'Clear Filter';\n        buttonContainer.appendChild(this.applyButton);\n        buttonContainer.appendChild(this.clearButton);\n        this.container.appendChild(buttonContainer);\n    }\n    createDebugPanel() {\n        this.debugPanel = document.createElement('div');\n        this.debugPanel.className = 'debug-panel';\n        this.debugPanel.style.display = 'none';\n        this.container.appendChild(this.debugPanel);\n    }\n    // Event handlers\n    handleRangeSelectionChange() {\n        if (!this.rangeSelector || !this.customDateContainer)\n            return;\n        const selectedRange = this.rangeSelector.value;\n        if (selectedRange === _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom) {\n            this.customDateContainer.classList.add('show');\n            this.debugLogger.logInfo(\"Switched to custom date range mode\");\n        }\n        else {\n            this.customDateContainer.classList.remove('show');\n            this.debugLogger.logInfo(`Switched to predefined range: ${selectedRange}`);\n        }\n    }\n    handleApplyFilter() {\n        try {\n            if (!this.rangeSelector)\n                return;\n            const selectedRange = this.rangeSelector.value;\n            let dateRange;\n            if (selectedRange === _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom) {\n                if (!this.customStartDate?.value || !this.customEndDate?.value) {\n                    this.debugLogger.logWarning(\"Custom dates not provided\");\n                    return;\n                }\n                const startDate = new Date(this.customStartDate.value);\n                const endDate = new Date(this.customEndDate.value);\n                dateRange = this.dateRangeCalculator.createCustomRange(startDate, endDate);\n            }\n            else {\n                dateRange = this.dateRangeCalculator.calculateDateRange(selectedRange);\n            }\n            if (!this.dateRangeCalculator.isValidDateRange(dateRange)) {\n                this.debugLogger.logError(\"Invalid date range selected\");\n                return;\n            }\n            if (this.onApplyFilter) {\n                this.onApplyFilter(dateRange);\n            }\n            this.debugLogger.logInfo(\"Apply filter action triggered\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to apply filter: ${error}`);\n        }\n    }\n    handleClearFilter() {\n        try {\n            if (this.onClearFilter) {\n                this.onClearFilter();\n            }\n            this.debugLogger.logInfo(\"Clear filter action triggered\");\n        }\n        catch (error) {\n            this.debugLogger.logError(`Failed to clear filter: ${error}`);\n        }\n    }\n    validateCustomDates() {\n        if (!this.customStartDate?.value || !this.customEndDate?.value || !this.applyButton)\n            return;\n        const startDate = new Date(this.customStartDate.value);\n        const endDate = new Date(this.customEndDate.value);\n        if (startDate > endDate) {\n            this.applyButton.disabled = true;\n            this.debugLogger.logWarning(\"Invalid custom date range: start date is after end date\");\n        }\n        else {\n            this.applyButton.disabled = false;\n            this.debugLogger.logInfo(\"Custom date range validated successfully\");\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///588\n\n}");

/***/ }),

/***/ 639:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ getPropertyValue),\n/* harmony export */   y: () => (/* binding */ getDescriptor)\n/* harmony export */ });\n/**\n * Build and return formatting descriptor for simple slice\n *\n * @param objectName Object name from capabilities\n * @param slice formatting simple slice\n * @returns simple slice formatting descriptor\n */\nfunction getDescriptor(objectName, slice) {\n    return {\n        objectName: objectName,\n        propertyName: slice.name,\n        selector: slice.selector,\n        altConstantValueSelector: slice.altConstantSelector,\n        instanceKind: slice.instanceKind\n    };\n}\n/**\n * Get property value from dataview objects if exists\n * Else return the default value from formatting settings object\n *\n * @param value dataview object value\n * @param defaultValue formatting settings default value\n * @returns formatting property value\n */\nfunction getPropertyValue(slice, value, defaultValue) {\n    if (value == null || (typeof value === \"object\" && !value.solid)) {\n        return defaultValue;\n    }\n    if (value.solid) {\n        return { value: value === null || value === void 0 ? void 0 : value.solid.color };\n    }\n    if ((slice === null || slice === void 0 ? void 0 : slice.type) === \"Dropdown\" /* visuals.FormattingComponent.Dropdown */ && slice.items) {\n        const itemsArray = slice.items;\n        return itemsArray.find(item => item.value == value);\n    }\n    return value;\n}\n//# sourceMappingURL=FormattingSettingsUtils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjM5LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tRENEYXRlVGltZVBpY2tlcjdDMUQyMjAyRkIwQjRDNTFBMEU2RkE5NjFFQkYyMjlDX0RFQlVHLy4vbm9kZV9tb2R1bGVzL3Bvd2VyYmktdmlzdWFscy11dGlscy1mb3JtYXR0aW5nbW9kZWwvbGliL3V0aWxzL0Zvcm1hdHRpbmdTZXR0aW5nc1V0aWxzLmpzPzE2ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCdWlsZCBhbmQgcmV0dXJuIGZvcm1hdHRpbmcgZGVzY3JpcHRvciBmb3Igc2ltcGxlIHNsaWNlXG4gKlxuICogQHBhcmFtIG9iamVjdE5hbWUgT2JqZWN0IG5hbWUgZnJvbSBjYXBhYmlsaXRpZXNcbiAqIEBwYXJhbSBzbGljZSBmb3JtYXR0aW5nIHNpbXBsZSBzbGljZVxuICogQHJldHVybnMgc2ltcGxlIHNsaWNlIGZvcm1hdHRpbmcgZGVzY3JpcHRvclxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVzY3JpcHRvcihvYmplY3ROYW1lLCBzbGljZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG9iamVjdE5hbWU6IG9iamVjdE5hbWUsXG4gICAgICAgIHByb3BlcnR5TmFtZTogc2xpY2UubmFtZSxcbiAgICAgICAgc2VsZWN0b3I6IHNsaWNlLnNlbGVjdG9yLFxuICAgICAgICBhbHRDb25zdGFudFZhbHVlU2VsZWN0b3I6IHNsaWNlLmFsdENvbnN0YW50U2VsZWN0b3IsXG4gICAgICAgIGluc3RhbmNlS2luZDogc2xpY2UuaW5zdGFuY2VLaW5kXG4gICAgfTtcbn1cbi8qKlxuICogR2V0IHByb3BlcnR5IHZhbHVlIGZyb20gZGF0YXZpZXcgb2JqZWN0cyBpZiBleGlzdHNcbiAqIEVsc2UgcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlIGZyb20gZm9ybWF0dGluZyBzZXR0aW5ncyBvYmplY3RcbiAqXG4gKiBAcGFyYW0gdmFsdWUgZGF0YXZpZXcgb2JqZWN0IHZhbHVlXG4gKiBAcGFyYW0gZGVmYXVsdFZhbHVlIGZvcm1hdHRpbmcgc2V0dGluZ3MgZGVmYXVsdCB2YWx1ZVxuICogQHJldHVybnMgZm9ybWF0dGluZyBwcm9wZXJ0eSB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZShzbGljZSwgdmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgIXZhbHVlLnNvbGlkKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUuc29saWQpIHtcbiAgICAgICAgcmV0dXJuIHsgdmFsdWU6IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS5zb2xpZC5jb2xvciB9O1xuICAgIH1cbiAgICBpZiAoKHNsaWNlID09PSBudWxsIHx8IHNsaWNlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzbGljZS50eXBlKSA9PT0gXCJEcm9wZG93blwiIC8qIHZpc3VhbHMuRm9ybWF0dGluZ0NvbXBvbmVudC5Ecm9wZG93biAqLyAmJiBzbGljZS5pdGVtcykge1xuICAgICAgICBjb25zdCBpdGVtc0FycmF5ID0gc2xpY2UuaXRlbXM7XG4gICAgICAgIHJldHVybiBpdGVtc0FycmF5LmZpbmQoaXRlbSA9PiBpdGVtLnZhbHVlID09IHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rm9ybWF0dGluZ1NldHRpbmdzVXRpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///639\n\n}");

/***/ }),

/***/ 667:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* unused harmony export FormattingSettingsService */\n/* harmony import */ var _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(754);\n\nclass FormattingSettingsService {\n    constructor(localizationManager) {\n        this.localizationManager = localizationManager;\n    }\n    /**\n     * Build visual formatting settings model from metadata dataView\n     *\n     * @param dataViews metadata dataView object\n     * @returns visual formatting settings model\n     */\n    populateFormattingSettingsModel(typeClass, dataView) {\n        var _a, _b;\n        const defaultSettings = new typeClass();\n        const dataViewObjects = (_a = dataView === null || dataView === void 0 ? void 0 : dataView.metadata) === null || _a === void 0 ? void 0 : _a.objects;\n        if (dataViewObjects) {\n            // loop over each formatting property and set its new value if exists\n            (_b = defaultSettings.cards) === null || _b === void 0 ? void 0 : _b.forEach((card) => {\n                var _a;\n                if (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .CompositeCard */ .St)\n                    (_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                const cardGroupInstances = (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn ? [card] : card.groups);\n                cardGroupInstances.forEach((cardGroupInstance) => {\n                    var _a, _b, _c, _d;\n                    // Set current top level toggle value\n                    (_a = cardGroupInstance.topLevelSlice) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, card.name);\n                    (_b = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.slices) === null || _b === void 0 ? void 0 : _b.forEach((slice) => {\n                        slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                    });\n                    (_d = (_c = cardGroupInstance === null || cardGroupInstance === void 0 ? void 0 : cardGroupInstance.container) === null || _c === void 0 ? void 0 : _c.containerItems) === null || _d === void 0 ? void 0 : _d.forEach((containerItem) => {\n                        var _a;\n                        (_a = containerItem === null || containerItem === void 0 ? void 0 : containerItem.slices) === null || _a === void 0 ? void 0 : _a.forEach((slice) => {\n                            slice === null || slice === void 0 ? void 0 : slice.setPropertiesValues(dataViewObjects, card.name);\n                        });\n                    });\n                });\n            });\n        }\n        return defaultSettings;\n    }\n    /**\n     * Build formatting model by parsing formatting settings model object\n     *\n     * @returns powerbi visual formatting model\n     */\n    buildFormattingModel(formattingSettingsModel) {\n        const formattingModel = {\n            cards: []\n        };\n        formattingSettingsModel.cards\n            .filter(({ visible = true }) => visible)\n            .forEach((card) => {\n            var _a;\n            const formattingCard = {\n                displayName: (this.localizationManager && card.displayNameKey) ? this.localizationManager.getDisplayName(card.displayNameKey) : card.displayName,\n                description: (this.localizationManager && card.descriptionKey) ? this.localizationManager.getDisplayName(card.descriptionKey) : card.description,\n                groups: [],\n                uid: card.name + \"-card\",\n                analyticsPane: card.analyticsPane,\n            };\n            const objectName = card.name;\n            if (card.topLevelSlice) {\n                const topLevelToggleSlice = card.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                topLevelToggleSlice.suppressDisplayName = true;\n                formattingCard.topLevelToggle = topLevelToggleSlice;\n            }\n            (_a = card.onPreProcess) === null || _a === void 0 ? void 0 : _a.call(card);\n            const isSimpleCard = card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn;\n            const cardGroupInstances = (isSimpleCard ?\n                [card].filter(({ visible = true }) => visible) :\n                card.groups.filter(({ visible = true }) => visible));\n            cardGroupInstances\n                .forEach((cardGroupInstance) => {\n                const groupUid = cardGroupInstance.name + \"-group\";\n                // Build formatting group for each group\n                const formattingGroup = {\n                    displayName: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.displayNameKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.displayNameKey) : cardGroupInstance.displayName,\n                    description: isSimpleCard ? undefined : (this.localizationManager && cardGroupInstance.descriptionKey)\n                        ? this.localizationManager.getDisplayName(cardGroupInstance.descriptionKey) : cardGroupInstance.description,\n                    slices: [],\n                    uid: groupUid,\n                    collapsible: cardGroupInstance.collapsible,\n                    delaySaveSlices: cardGroupInstance.delaySaveSlices,\n                    disabled: cardGroupInstance.disabled,\n                    disabledReason: cardGroupInstance.disabledReason,\n                };\n                formattingCard.groups.push(formattingGroup);\n                // In case formatting model adds data points or top categories (Like when you modify specific visual category color).\n                // these categories use same object name and property name from capabilities and the generated uid will be the same for these formatting categories properties\n                // Solution => Save slice names to modify each slice uid to be unique by adding counter value to the new slice uid\n                const sliceNames = {};\n                // Build formatting container slice for each property\n                if (cardGroupInstance.container) {\n                    const container = cardGroupInstance.container;\n                    const containerUid = groupUid + \"-container\";\n                    const formattingContainer = {\n                        displayName: (this.localizationManager && container.displayNameKey)\n                            ? this.localizationManager.getDisplayName(container.displayNameKey) : container.displayName,\n                        description: (this.localizationManager && container.descriptionKey)\n                            ? this.localizationManager.getDisplayName(container.descriptionKey) : container.description,\n                        containerItems: [],\n                        uid: containerUid\n                    };\n                    container.containerItems.forEach((containerItem) => {\n                        // Build formatting container item object\n                        const containerIemName = containerItem.displayNameKey ? containerItem.displayNameKey : containerItem.displayName;\n                        const containerItemUid = containerUid + containerIemName;\n                        const formattingContainerItem = {\n                            displayName: (this.localizationManager && containerItem.displayNameKey)\n                                ? this.localizationManager.getDisplayName(containerItem.displayNameKey) : containerItem.displayName,\n                            slices: [],\n                            uid: containerItemUid\n                        };\n                        // Build formatting slices and add them to current formatting container item\n                        this.buildFormattingSlices({ slices: containerItem.slices, objectName, sliceNames, formattingSlices: formattingContainerItem.slices });\n                        formattingContainer.containerItems.push(formattingContainerItem);\n                    });\n                    formattingGroup.container = formattingContainer;\n                }\n                if (cardGroupInstance.slices) {\n                    if (cardGroupInstance.topLevelSlice) {\n                        const topLevelToggleSlice = cardGroupInstance.topLevelSlice.getFormattingSlice(objectName, this.localizationManager);\n                        topLevelToggleSlice.suppressDisplayName = true;\n                        (formattingGroup.displayName == undefined ? formattingCard : formattingGroup).topLevelToggle = topLevelToggleSlice;\n                    }\n                    // Build formatting slice for each property\n                    this.buildFormattingSlices({ slices: cardGroupInstance.slices, objectName, sliceNames, formattingSlices: formattingGroup.slices });\n                }\n            });\n            formattingCard.revertToDefaultDescriptors = this.getRevertToDefaultDescriptor(card);\n            formattingModel.cards.push(formattingCard);\n        });\n        return formattingModel;\n    }\n    buildFormattingSlices({ slices, objectName, sliceNames, formattingSlices }) {\n        // Filter slices based on their visibility\n        slices === null || slices === void 0 ? void 0 : slices.filter(({ visible = true }) => visible).forEach((slice) => {\n            const formattingSlice = slice === null || slice === void 0 ? void 0 : slice.getFormattingSlice(objectName, this.localizationManager);\n            if (formattingSlice) {\n                // Modify formatting slice uid if needed\n                if (sliceNames[slice.name] === undefined) {\n                    sliceNames[slice.name] = 0;\n                }\n                else {\n                    sliceNames[slice.name]++;\n                    formattingSlice.uid = `${formattingSlice.uid}-${sliceNames[slice.name]}`;\n                }\n                formattingSlices.push(formattingSlice);\n            }\n        });\n    }\n    getRevertToDefaultDescriptor(card) {\n        var _a;\n        // Proceeded slice names are saved to prevent duplicated default descriptors in case of using \n        // formatting categories & selectors, since they have the same descriptor objectName and propertyName\n        const sliceNames = {};\n        const revertToDefaultDescriptors = [];\n        let cardSlicesDefaultDescriptors;\n        let cardContainerSlicesDefaultDescriptors = [];\n        // eslint-disable-next-line\n        if (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .CompositeCard */ .St && card.topLevelSlice)\n            revertToDefaultDescriptors.push(...(_a = card.topLevelSlice) === null || _a === void 0 ? void 0 : _a.getRevertToDefaultDescriptor(card.name));\n        const cardGroupInstances = (card instanceof _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__/* .SimpleCard */ .Tn ?\n            [card].filter(({ visible = true }) => visible) :\n            card.groups.filter(({ visible = true }) => visible));\n        cardGroupInstances.forEach((cardGroupInstance) => {\n            var _a, _b;\n            cardSlicesDefaultDescriptors = this.getSlicesRevertToDefaultDescriptor(card.name, cardGroupInstance.slices, sliceNames, cardGroupInstance.topLevelSlice);\n            (_b = (_a = cardGroupInstance.container) === null || _a === void 0 ? void 0 : _a.containerItems) === null || _b === void 0 ? void 0 : _b.forEach((containerItem) => {\n                cardContainerSlicesDefaultDescriptors = cardContainerSlicesDefaultDescriptors.concat(this.getSlicesRevertToDefaultDescriptor(card.name, containerItem.slices, sliceNames));\n            });\n            revertToDefaultDescriptors.push(...cardSlicesDefaultDescriptors.concat(cardContainerSlicesDefaultDescriptors));\n        });\n        return revertToDefaultDescriptors;\n    }\n    getSlicesRevertToDefaultDescriptor(cardName, slices, sliceNames, topLevelSlice) {\n        let revertToDefaultDescriptors = [];\n        if (topLevelSlice) {\n            sliceNames[topLevelSlice.name] = true;\n            revertToDefaultDescriptors = revertToDefaultDescriptors.concat(topLevelSlice.getRevertToDefaultDescriptor(cardName));\n        }\n        slices === null || slices === void 0 ? void 0 : slices.forEach((slice) => {\n            if (slice && !sliceNames[slice.name]) {\n                sliceNames[slice.name] = true;\n                revertToDefaultDescriptors = revertToDefaultDescriptors.concat(slice.getRevertToDefaultDescriptor(cardName));\n            }\n        });\n        return revertToDefaultDescriptors;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormattingSettingsService);\n//# sourceMappingURL=FormattingSettingsService.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///667\n\n}");

/***/ }),

/***/ 668:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* binding */ DateRangeCalculator)\n/* harmony export */ });\n/* harmony import */ var _settings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(795);\n/*\n *  Power BI Date Slicer Visual\n *\n *  Date Range Calculator Implementation\n *  Single Responsibility: Handle all date range calculations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n */\n\n\n/**\n * Implementation of date range calculation service\n * Single Responsibility: Calculate different types of date ranges\n * Open/Closed Principle: Open for extension (new range types), closed for modification\n */\nclass DateRangeCalculator {\n    /**\n     * Calculate date range based on predefined types\n     * @param rangeType The type of date range to calculate\n     * @returns IDateRange object with start and end dates\n     */\n    calculateDateRange(rangeType) {\n        const today = new Date();\n        today.setHours(23, 59, 59, 999); // Set to end of day\n        let startDate;\n        const endDate = new Date(today);\n        switch (rangeType) {\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last7Days:\n                startDate = this.subtractDays(today, 7);\n                break;\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last30Days:\n                startDate = this.subtractDays(today, 30);\n                break;\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last90Days:\n                startDate = this.subtractDays(today, 90);\n                break;\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom:\n            default:\n                // For custom, return today as both start and end\n                startDate = new Date(today);\n                break;\n        }\n        startDate.setHours(0, 0, 0, 0); // Set to start of day\n        return {\n            startDate,\n            endDate,\n            type: rangeType\n        };\n    }\n    /**\n     * Create custom date range\n     * @param startDate Start date for the range\n     * @param endDate End date for the range\n     * @returns IDateRange object with custom dates\n     */\n    createCustomRange(startDate, endDate) {\n        const adjustedStartDate = new Date(startDate);\n        const adjustedEndDate = new Date(endDate);\n        adjustedStartDate.setHours(0, 0, 0, 0);\n        adjustedEndDate.setHours(23, 59, 59, 999);\n        return {\n            startDate: adjustedStartDate,\n            endDate: adjustedEndDate,\n            type: _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom\n        };\n    }\n    /**\n     * Validate if a date range is valid\n     * @param dateRange The date range to validate\n     * @returns True if valid, false otherwise\n     */\n    isValidDateRange(dateRange) {\n        if (!dateRange || !dateRange.startDate || !dateRange.endDate) {\n            return false;\n        }\n        return dateRange.startDate <= dateRange.endDate;\n    }\n    /**\n     * Subtract days from a given date\n     * @param date The base date\n     * @param days Number of days to subtract\n     * @returns New date with days subtracted\n     */\n    subtractDays(date, days) {\n        const result = new Date(date);\n        result.setDate(result.getDate() - days);\n        return result;\n    }\n    /**\n     * Format date for display purposes\n     * @param date The date to format\n     * @returns Formatted date string\n     */\n    formatDate(date) {\n        return date.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n        });\n    }\n    /**\n     * Get display text for date range type\n     * @param rangeType The range type\n     * @returns Display text for the range type\n     */\n    getRangeTypeDisplayText(rangeType) {\n        switch (rangeType) {\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last7Days:\n                return \"Last 7 Days\";\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last30Days:\n                return \"Last 30 Days\";\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Last90Days:\n                return \"Last 90 Days\";\n            case _settings__WEBPACK_IMPORTED_MODULE_0__/* .DateRangeType */ .c.Custom:\n                return \"Custom Range\";\n            default:\n                return \"Unknown Range\";\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///668\n\n}");

/***/ }),

/***/ 669:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _src_visual__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\n\nvar powerbiKey = \"powerbi\";\nvar powerbi = window[powerbiKey];\nvar mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG = {\n    name: 'mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG',\n    displayName: 'MDCDateTimePicker',\n    class: 'Visual',\n    apiVersion: '5.3.0',\n    create: (options) => {\n        if (_src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .b) {\n            return new _src_visual__WEBPACK_IMPORTED_MODULE_0__/* .Visual */ .b(options);\n        }\n        throw 'Visual instance not found';\n    },\n    createModalDialog: (dialogId, options, initialState) => {\n        const dialogRegistry = globalThis.dialogRegistry;\n        if (dialogId in dialogRegistry) {\n            new dialogRegistry[dialogId](options, initialState);\n        }\n    },\n    custom: true\n};\nif (typeof powerbi !== \"undefined\") {\n    powerbi.visuals = powerbi.visuals || {};\n    powerbi.visuals.plugins = powerbi.visuals.plugins || {};\n    powerbi.visuals.plugins[\"mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG\"] = mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjY5LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTBDO0FBSzFDLElBQUksVUFBVSxHQUFRLFNBQVMsQ0FBQztBQUNoQyxJQUFJLE9BQU8sR0FBUSxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEMsSUFBSSx1REFBdUQsR0FBa0I7SUFDekUsSUFBSSxFQUFFLHlEQUF5RDtJQUMvRCxXQUFXLEVBQUUsbUJBQW1CO0lBQ2hDLEtBQUssRUFBRSxRQUFRO0lBQ2YsVUFBVSxFQUFFLE9BQU87SUFDbkIsTUFBTSxFQUFFLENBQUMsT0FBa0MsRUFBRSxFQUFFO1FBQzNDLElBQUksd0RBQU0sRUFBRSxDQUFDO1lBQ1QsT0FBTyxJQUFJLHdEQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0IsQ0FBQztRQUNELE1BQU0sMkJBQTJCLENBQUM7SUFDdEMsQ0FBQztJQUNELGlCQUFpQixFQUFFLENBQUMsUUFBZ0IsRUFBRSxPQUFpQyxFQUFFLFlBQW9CLEVBQUUsRUFBRTtRQUM3RixNQUFNLGNBQWMsR0FBUyxVQUFXLENBQUMsY0FBYyxDQUFDO1FBQ3hELElBQUksUUFBUSxJQUFJLGNBQWMsRUFBRSxDQUFDO1lBQzdCLElBQUksY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUN4RCxDQUFDO0lBQ0wsQ0FBQztJQUNELE1BQU0sRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUNGLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxFQUFFLENBQUM7SUFDakMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN4QyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDeEQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMseURBQXlELENBQUMsR0FBRyx1REFBdUQsQ0FBQztBQUNqSixDQUFDO0FBQ0QsaUVBQWUsdURBQXVELEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tRENEYXRlVGltZVBpY2tlcjdDMUQyMjAyRkIwQjRDNTFBMEU2RkE5NjFFQkYyMjlDX0RFQlVHLy4vLnRtcC9wcmVjb21waWxlL3Zpc3VhbFBsdWdpbi50cz9jNjVhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpc3VhbCB9IGZyb20gXCIuLi8uLi9zcmMvdmlzdWFsXCI7XG5pbXBvcnQgcG93ZXJiaVZpc3VhbHNBcGkgZnJvbSBcInBvd2VyYmktdmlzdWFscy1hcGlcIjtcbmltcG9ydCBJVmlzdWFsUGx1Z2luID0gcG93ZXJiaVZpc3VhbHNBcGkudmlzdWFscy5wbHVnaW5zLklWaXN1YWxQbHVnaW47XG5pbXBvcnQgVmlzdWFsQ29uc3RydWN0b3JPcHRpb25zID0gcG93ZXJiaVZpc3VhbHNBcGkuZXh0ZW5zaWJpbGl0eS52aXN1YWwuVmlzdWFsQ29uc3RydWN0b3JPcHRpb25zO1xuaW1wb3J0IERpYWxvZ0NvbnN0cnVjdG9yT3B0aW9ucyA9IHBvd2VyYmlWaXN1YWxzQXBpLmV4dGVuc2liaWxpdHkudmlzdWFsLkRpYWxvZ0NvbnN0cnVjdG9yT3B0aW9ucztcbnZhciBwb3dlcmJpS2V5OiBhbnkgPSBcInBvd2VyYmlcIjtcbnZhciBwb3dlcmJpOiBhbnkgPSB3aW5kb3dbcG93ZXJiaUtleV07XG52YXIgbURDRGF0ZVRpbWVQaWNrZXI3QzFEMjIwMkZCMEI0QzUxQTBFNkZBOTYxRUJGMjI5Q19ERUJVRzogSVZpc3VhbFBsdWdpbiA9IHtcbiAgICBuYW1lOiAnbURDRGF0ZVRpbWVQaWNrZXI3QzFEMjIwMkZCMEI0QzUxQTBFNkZBOTYxRUJGMjI5Q19ERUJVRycsXG4gICAgZGlzcGxheU5hbWU6ICdNRENEYXRlVGltZVBpY2tlcicsXG4gICAgY2xhc3M6ICdWaXN1YWwnLFxuICAgIGFwaVZlcnNpb246ICc1LjMuMCcsXG4gICAgY3JlYXRlOiAob3B0aW9ucz86IFZpc3VhbENvbnN0cnVjdG9yT3B0aW9ucykgPT4ge1xuICAgICAgICBpZiAoVmlzdWFsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFZpc3VhbChvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAnVmlzdWFsIGluc3RhbmNlIG5vdCBmb3VuZCc7XG4gICAgfSxcbiAgICBjcmVhdGVNb2RhbERpYWxvZzogKGRpYWxvZ0lkOiBzdHJpbmcsIG9wdGlvbnM6IERpYWxvZ0NvbnN0cnVjdG9yT3B0aW9ucywgaW5pdGlhbFN0YXRlOiBvYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZGlhbG9nUmVnaXN0cnkgPSAoPGFueT5nbG9iYWxUaGlzKS5kaWFsb2dSZWdpc3RyeTtcbiAgICAgICAgaWYgKGRpYWxvZ0lkIGluIGRpYWxvZ1JlZ2lzdHJ5KSB7XG4gICAgICAgICAgICBuZXcgZGlhbG9nUmVnaXN0cnlbZGlhbG9nSWRdKG9wdGlvbnMsIGluaXRpYWxTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGN1c3RvbTogdHJ1ZVxufTtcbmlmICh0eXBlb2YgcG93ZXJiaSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHBvd2VyYmkudmlzdWFscyA9IHBvd2VyYmkudmlzdWFscyB8fCB7fTtcbiAgICBwb3dlcmJpLnZpc3VhbHMucGx1Z2lucyA9IHBvd2VyYmkudmlzdWFscy5wbHVnaW5zIHx8IHt9O1xuICAgIHBvd2VyYmkudmlzdWFscy5wbHVnaW5zW1wibURDRGF0ZVRpbWVQaWNrZXI3QzFEMjIwMkZCMEI0QzUxQTBFNkZBOTYxRUJGMjI5Q19ERUJVR1wiXSA9IG1EQ0RhdGVUaW1lUGlja2VyN0MxRDIyMDJGQjBCNEM1MUEwRTZGQTk2MUVCRjIyOUNfREVCVUc7XG59XG5leHBvcnQgZGVmYXVsdCBtRENEYXRlVGltZVBpY2tlcjdDMUQyMjAyRkIwQjRDNTFBMEU2RkE5NjFFQkYyMjlDX0RFQlVHOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///669\n\n}");

/***/ }),

/***/ 674:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   O: () => (/* reexport safe */ _FormattingSettingsService__WEBPACK_IMPORTED_MODULE_1__.A),\n/* harmony export */   z: () => (/* reexport module object */ _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__)\n/* harmony export */ });\n/* harmony import */ var _FormattingSettingsComponents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(754);\n/* harmony import */ var _FormattingSettingsService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(667);\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjc0LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNEO0FBQ1g7QUFDekQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tRENEYXRlVGltZVBpY2tlcjdDMUQyMjAyRkIwQjRDNTFBMEU2RkE5NjFFQkYyMjlDX0RFQlVHLy4vbm9kZV9tb2R1bGVzL3Bvd2VyYmktdmlzdWFscy11dGlscy1mb3JtYXR0aW5nbW9kZWwvbGliL2luZGV4LmpzPzNhOGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZm9ybWF0dGluZ1NldHRpbmdzIGZyb20gXCIuL0Zvcm1hdHRpbmdTZXR0aW5nc0NvbXBvbmVudHNcIjtcbmltcG9ydCBGb3JtYXR0aW5nU2V0dGluZ3NTZXJ2aWNlIGZyb20gXCIuL0Zvcm1hdHRpbmdTZXR0aW5nc1NlcnZpY2VcIjtcbmV4cG9ydCB7IGZvcm1hdHRpbmdTZXR0aW5ncywgRm9ybWF0dGluZ1NldHRpbmdzU2VydmljZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///674\n\n}");

/***/ }),

/***/ 754:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Kx: () => (/* binding */ Model),\n/* harmony export */   PA: () => (/* binding */ ItemDropdown),\n/* harmony export */   St: () => (/* binding */ CompositeCard),\n/* harmony export */   Tn: () => (/* binding */ SimpleCard),\n/* harmony export */   iB: () => (/* binding */ NumUpDown),\n/* harmony export */   jF: () => (/* binding */ ToggleSwitch),\n/* harmony export */   sk: () => (/* binding */ ColorPicker)\n/* harmony export */ });\n/* unused harmony exports CardGroupEntity, Group, SimpleSlice, AlignmentGroup, Slider, DatePicker, AutoDropdown, DurationPicker, ErrorRangeControl, FieldPicker, ItemFlagsSelection, AutoFlagsSelection, TextInput, TextArea, FontPicker, GradientBar, ImageUpload, ListEditor, ReadOnlyText, ShapeMapSelector, CompositeSlice, FontControl, MarginPadding, Container, ContainerItem */\n/* harmony import */ var _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(639);\n/**\n * Powerbi utils components classes for custom visual formatting pane objects\n *\n */\n\nclass NamedEntity {\n}\nclass CardGroupEntity extends NamedEntity {\n}\nclass Model {\n}\n/** CompositeCard is use to populate a card into the formatting pane with multiple groups */\nclass CompositeCard extends NamedEntity {\n}\nclass Group extends CardGroupEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\n/** SimpleCard is use to populate a card into the formatting pane in a single group */\nclass SimpleCard extends CardGroupEntity {\n}\nclass SimpleSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const sliceDisplayName = (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName;\n        const sliceDescription = (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description;\n        const componentDisplayName = {\n            displayName: sliceDisplayName,\n            description: sliceDescription,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName, localizationManager)\n            } });\n    }\n    // eslint-disable-next-line\n    getFormattingComponent(objectName, localizationManager) {\n        return {\n            descriptor: _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__/* .getDescriptor */ .y(objectName, this),\n            value: this.value,\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return [{\n                objectName: objectName,\n                propertyName: this.name\n            }];\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a;\n        const newValue = (_a = dataViewObjects === null || dataViewObjects === void 0 ? void 0 : dataViewObjects[objectName]) === null || _a === void 0 ? void 0 : _a[this.name];\n        this.value = _utils_FormattingSettingsUtils__WEBPACK_IMPORTED_MODULE_0__/* .getPropertyValue */ .D(this, newValue, this.value);\n    }\n}\nclass AlignmentGroup extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"AlignmentGroup\" /* visuals.FormattingComponent.AlignmentGroup */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mode: this.mode, supportsNoSelection: this.supportsNoSelection });\n    }\n}\nclass ToggleSwitch extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ToggleSwitch\" /* visuals.FormattingComponent.ToggleSwitch */;\n    }\n}\nclass ColorPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ColorPicker\" /* visuals.FormattingComponent.ColorPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { defaultColor: this.defaultColor, isNoFillItemSupported: this.isNoFillItemSupported });\n    }\n}\nclass NumUpDown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"NumUpDown\" /* visuals.FormattingComponent.NumUpDown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { options: this.options });\n    }\n}\nclass Slider extends NumUpDown {\n    constructor() {\n        super(...arguments);\n        this.type = \"Slider\" /* visuals.FormattingComponent.Slider */;\n    }\n}\nclass DatePicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DatePicker\" /* visuals.FormattingComponent.DatePicker */;\n    }\n    getFormattingComponent(objectName, localizationManager) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: (localizationManager && this.placeholderKey) ? localizationManager.getDisplayName(this.placeholderKey) : this.placeholder, validators: this.validators });\n    }\n}\nclass ItemDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nclass AutoDropdown extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"Dropdown\" /* visuals.FormattingComponent.Dropdown */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { mergeValues: this.mergeValues, filterValues: this.filterValues });\n    }\n}\nclass DurationPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"DurationPicker\" /* visuals.FormattingComponent.DurationPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nclass ErrorRangeControl extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ErrorRangeControl\" /* visuals.FormattingComponent.ErrorRangeControl */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators });\n    }\n}\nclass FieldPicker extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FieldPicker\" /* visuals.FormattingComponent.FieldPicker */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { validators: this.validators, allowMultipleValues: this.allowMultipleValues });\n    }\n}\nclass ItemFlagsSelection extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { items: this.items });\n    }\n}\nclass AutoFlagsSelection extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FlagsSelection\" /* visuals.FormattingComponent.FlagsSelection */;\n    }\n}\nclass TextInput extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"TextInput\" /* visuals.FormattingComponent.TextInput */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { placeholder: this.placeholder });\n    }\n}\nclass TextArea extends TextInput {\n    constructor() {\n        super(...arguments);\n        this.type = \"TextArea\" /* visuals.FormattingComponent.TextArea */;\n    }\n}\nclass FontPicker extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"FontPicker\" /* visuals.FormattingComponent.FontPicker */;\n    }\n}\nclass GradientBar extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"GradientBar\" /* visuals.FormattingComponent.GradientBar */;\n    }\n}\nclass ImageUpload extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ImageUpload\" /* visuals.FormattingComponent.ImageUpload */;\n    }\n}\nclass ListEditor extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ListEditor\" /* visuals.FormattingComponent.ListEditor */;\n    }\n}\nclass ReadOnlyText extends SimpleSlice {\n    constructor() {\n        super(...arguments);\n        this.type = \"ReadOnlyText\" /* visuals.FormattingComponent.ReadOnlyText */;\n    }\n}\nclass ShapeMapSelector extends SimpleSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"ShapeMapSelector\" /* visuals.FormattingComponent.ShapeMapSelector */;\n    }\n    getFormattingComponent(objectName) {\n        return Object.assign(Object.assign({}, super.getFormattingComponent(objectName)), { isAzMapReferenceSelector: this.isAzMapReferenceSelector });\n    }\n}\nclass CompositeSlice extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n    getFormattingSlice(objectName, localizationManager) {\n        const controlType = this.type;\n        const propertyName = this.name;\n        const componentDisplayName = {\n            displayName: (localizationManager && this.displayNameKey) ? localizationManager.getDisplayName(this.displayNameKey) : this.displayName,\n            description: (localizationManager && this.descriptionKey) ? localizationManager.getDisplayName(this.descriptionKey) : this.description,\n            uid: objectName + '-' + propertyName,\n        };\n        return Object.assign(Object.assign({}, componentDisplayName), { control: {\n                type: controlType,\n                properties: this.getFormattingComponent(objectName)\n            } });\n    }\n}\nclass FontControl extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"FontControl\" /* visuals.FormattingComponent.FontControl */;\n    }\n    getFormattingComponent(objectName) {\n        var _a, _b, _c;\n        return {\n            fontFamily: this.fontFamily.getFormattingComponent(objectName),\n            fontSize: this.fontSize.getFormattingComponent(objectName),\n            bold: (_a = this.bold) === null || _a === void 0 ? void 0 : _a.getFormattingComponent(objectName),\n            italic: (_b = this.italic) === null || _b === void 0 ? void 0 : _b.getFormattingComponent(objectName),\n            underline: (_c = this.underline) === null || _c === void 0 ? void 0 : _c.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.fontFamily.getRevertToDefaultDescriptor(objectName)\n            .concat(this.fontSize.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bold ? this.bold.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.italic ? this.italic.getRevertToDefaultDescriptor(objectName) : [])\n            .concat(this.underline ? this.underline.getRevertToDefaultDescriptor(objectName) : []);\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        var _a, _b, _c;\n        this.fontFamily.setPropertiesValues(dataViewObjects, objectName);\n        this.fontSize.setPropertiesValues(dataViewObjects, objectName);\n        (_a = this.bold) === null || _a === void 0 ? void 0 : _a.setPropertiesValues(dataViewObjects, objectName);\n        (_b = this.italic) === null || _b === void 0 ? void 0 : _b.setPropertiesValues(dataViewObjects, objectName);\n        (_c = this.underline) === null || _c === void 0 ? void 0 : _c.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nclass MarginPadding extends CompositeSlice {\n    constructor(object) {\n        super(object);\n        this.type = \"MarginPadding\" /* visuals.FormattingComponent.MarginPadding */;\n    }\n    getFormattingComponent(objectName) {\n        return {\n            left: this.left.getFormattingComponent(objectName),\n            right: this.right.getFormattingComponent(objectName),\n            top: this.top.getFormattingComponent(objectName),\n            bottom: this.bottom.getFormattingComponent(objectName)\n        };\n    }\n    getRevertToDefaultDescriptor(objectName) {\n        return this.left.getRevertToDefaultDescriptor(objectName)\n            .concat(this.right.getRevertToDefaultDescriptor(objectName))\n            .concat(this.top.getRevertToDefaultDescriptor(objectName))\n            .concat(this.bottom.getRevertToDefaultDescriptor(objectName));\n    }\n    setPropertiesValues(dataViewObjects, objectName) {\n        this.left.setPropertiesValues(dataViewObjects, objectName);\n        this.right.setPropertiesValues(dataViewObjects, objectName);\n        this.top.setPropertiesValues(dataViewObjects, objectName);\n        this.bottom.setPropertiesValues(dataViewObjects, objectName);\n    }\n}\nclass Container extends NamedEntity {\n    constructor(object) {\n        super();\n        Object.assign(this, object);\n    }\n}\nclass ContainerItem extends (/* unused pure expression or super */ null && (NamedEntity)) {\n}\n//# sourceMappingURL=FormattingSettingsComponents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///754\n\n}");

/***/ }),

/***/ 795:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   S: () => (/* binding */ VisualFormattingSettingsModel),\n/* harmony export */   c: () => (/* binding */ DateRangeType)\n/* harmony export */ });\n/* harmony import */ var powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(674);\n/*\n *  Power BI Visualizations\n *\n *  Copyright (c) Microsoft Corporation\n *  All rights reserved.\n *  MIT License\n *\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\n *  in the Software without restriction, including without limitation the rights\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n *  copies of the Software, and to permit persons to whom the Software is\n *  furnished to do so, subject to the following conditions:\n *\n *  The above copyright notice and this permission notice shall be included in\n *  all copies or substantial portions of the Software.\n *\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n *  THE SOFTWARE.\n */\n\n\nvar FormattingSettingsCard = powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.SimpleCard */ .z.Tn;\nvar FormattingSettingsModel = powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.Model */ .z.Kx;\n/**\n * Date Slicer Settings Card\n * Responsible for configuring the date slicer behavior and appearance\n */\nclass DateSlicerSettings extends FormattingSettingsCard {\n    /**\n     * Default date range selection (Last 7 Days, Last 30 Days, Last 90 Days, Custom)\n     */\n    defaultRange = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ItemDropdown */ .z.PA({\n        name: \"defaultRange\",\n        displayName: \"Default Range\",\n        items: [\n            { displayName: \"Last 7 Days\", value: \"last7days\" },\n            { displayName: \"Last 30 Days\", value: \"last30days\" },\n            { displayName: \"Last 90 Days\", value: \"last90days\" },\n            { displayName: \"Custom\", value: \"custom\" }\n        ],\n        value: { displayName: \"Last 7 Days\", value: \"last7days\" }\n    });\n    /**\n     * Enable/Disable debug mode for troubleshooting\n     */\n    debugMode = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ToggleSwitch */ .z.jF({\n        name: \"debugMode\",\n        displayName: \"Enable Debug Mode\",\n        value: false\n    });\n    /**\n     * Primary color for the slicer UI\n     */\n    primaryColor = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ColorPicker */ .z.sk({\n        name: \"primaryColor\",\n        displayName: \"Primary Color\",\n        value: { value: \"#0078d4\" }\n    });\n    /**\n     * Secondary color for buttons and accents\n     */\n    secondaryColor = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.ColorPicker */ .z.sk({\n        name: \"secondaryColor\",\n        displayName: \"Secondary Color\",\n        value: { value: \"#106ebe\" }\n    });\n    /**\n     * Font size for the slicer text\n     */\n    fontSize = new powerbi_visuals_utils_formattingmodel__WEBPACK_IMPORTED_MODULE_0__/* .formattingSettings.NumUpDown */ .z.iB({\n        name: \"fontSize\",\n        displayName: \"Font Size\",\n        value: 14,\n        options: {\n            minValue: {\n                type: 0 /* powerbi.visuals.ValidatorType.Min */,\n                value: 8\n            },\n            maxValue: {\n                type: 1 /* powerbi.visuals.ValidatorType.Max */,\n                value: 24\n            }\n        }\n    });\n    name = \"dateSlicerSettings\";\n    displayName = \"Date Slicer Settings\";\n    slices = [\n        this.defaultRange,\n        this.debugMode,\n        this.primaryColor,\n        this.secondaryColor,\n        this.fontSize\n    ];\n}\n/**\n * Visual formatting settings model class\n * Single Responsibility: Manages all formatting settings for the visual\n */\nclass VisualFormattingSettingsModel extends FormattingSettingsModel {\n    // Create formatting settings model formatting cards\n    dateSlicerSettings = new DateSlicerSettings();\n    cards = [this.dateSlicerSettings];\n}\n/**\n * Enum for predefined date ranges\n */\nvar DateRangeType;\n(function (DateRangeType) {\n    DateRangeType[\"Last7Days\"] = \"last7days\";\n    DateRangeType[\"Last30Days\"] = \"last30days\";\n    DateRangeType[\"Last90Days\"] = \"last90days\";\n    DateRangeType[\"Custom\"] = \"custom\";\n})(DateRangeType || (DateRangeType = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///795\n\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__(669);
/******/ 	mDCDateTimePicker7C1D2202FB0B4C51A0E6FA961EBF229C_DEBUG = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=https://localhost:8080/assets/visual.js.map